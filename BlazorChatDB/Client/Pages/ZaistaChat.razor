@page "/chat"
@using BlazorChatDB.Shared
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager _nm
 
@if (@_ulogovan)
{
	<h3>Chat</h3>
	<EditForm Model="_poruka" OnSubmit="PosaljiPoruku">
		<p>Poruka:<InputText @bind-Value="_poruka.Sadrzaj"/></p>
		<button class="btn btn-primary" type="submit">Log in</button>
	</EditForm>
	<ul>
		@foreach (Poruka p in _primljenePoruke)
		{
			<li>[@p.Vreme] @p.Posiljaoc.Uname: @p.Sadrzaj</li>
		}
	</ul>
}
else
{
	<h3>Login</h3>
	<p><b>@_greska</b></p>
	<EditForm Model="_korisnik" OnSubmit="Login">
		<p>Ime:<InputText @bind-Value="_korisnik.Uname"/></p>
		<p>Sifra:<InputText @bind-Value="_korisnik.Sifra"/></p>
		<button class="btn btn-outline-primary" type="submit">Posalji</button>
	</EditForm>
}


@code
{
	private bool _ulogovan;
	private Korisnik _korisnik = new Korisnik();
	private HubConnection _hc;
	private string _greska;
	private List<Poruka> _primljenePoruke = new List<Poruka>();
	private Poruka _poruka = new Poruka();

	protected override async Task OnInitializedAsync()
	{
		_hc = new HubConnectionBuilder().WithUrl(_nm.ToAbsoluteUri("ch")).Build();

		_hc.On<bool, Korisnik>("KorOdServera", (uspeh, kor) =>
		{
			if (uspeh)
			{
				_ulogovan = true;
				_korisnik = kor;
				StateHasChanged();
			}
			else
			{
				_greska = "Korisnicko ili sifra nisu u redu!";
				StateHasChanged();
			}
		});

		_hc.On<Poruka>("PorukaKlijent", (p) =>
		{
			if (_ulogovan)
			{
				_primljenePoruke.Add(p);
				StateHasChanged();
			}
		});

		await _hc.StartAsync();
	}

	private void Login()
	{
		_greska = "";
		_hc.SendAsync("LogInServ", _korisnik);
	}

	private void PosaljiPoruku()
	{
		_poruka.Posiljaoc = _korisnik;
		_poruka.Vreme = DateTime.Now;
		_hc.SendAsync("PorukaServer", _poruka);
		_poruka = new Poruka();
	}

}
